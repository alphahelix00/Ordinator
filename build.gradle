buildscript {
    ext.kotlin_version = '1.1.0'
    ext.slf4j_version = '1.7.24'
    ext.logback_version = '1.2.1'
    ext.junit_version = '4.12'
    ext.dokka_version = '0.9.13'

    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}

allprojects {
    group 'com.github.kvnxiao'
    version '1.0'

    task wrapper(type: Wrapper) {
        gradleVersion = '3.4'
        distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
    }
}

subprojects {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'maven'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'org.jetbrains.dokka'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        compile "org.slf4j:slf4j-api:$slf4j_version"
        testCompile "ch.qos.logback:logback-classic:$logback_version"
        testCompile "junit:junit:$junit_version"
    }

    dokka {
        moduleName = project.name
        outputFormat = 'html'
        outputDirectory = "$buildDir/docs/kotlindoc"
        processConfigurations = ['compile']
        linkMapping {
            dir = "src/main/kotlin"
            url = "https://github.com/kvnxiao/kommandant/tree/master/${project.name}/src/main/kotlin"
            suffix = "#L"
        }
        linkMapping {
            dir = "src/main/java"
            url = "https://github.com/kvnxiao/kommandant/tree/master/${project.name}/src/main/java"
            suffix = "#L"
        }
        sourceDirs = files('src/main/kotlin', 'src/main/java')
    }

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        moduleName = project.name
        outputFormat = 'javadoc'
        outputDirectory = javadoc.destinationDir
        processConfigurations = ['compile']
        linkMapping {
            dir = "src/main/kotlin"
            url = "https://github.com/kvnxiao/kommandant/tree/master/${project.name}/src/main/kotlin"
            suffix = "#L"
        }
        linkMapping {
            dir = "src/main/java"
            url = "https://github.com/kvnxiao/kommandant/tree/master/${project.name}/src/main/java"
            suffix = "#L"
        }
        sourceDirs = files('src/main/kotlin', 'src/main/java')
    }

    task generateDocs {
        group = 'documentation'
        dependsOn 'dokka'
        dependsOn 'dokkaJavadoc'
    }

    task copyCss(type: Copy) {
        from("${rootProject.projectDir}/docs/style.css")
        into("${project.buildDir}/docs/kotlindoc/")
        doLast {
            println("Copied custom KDoc stylesheet into build directory for '${project.name}'")
        }
    }

    generateDocs.finalizedBy copyCss

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: generateDocs) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task generateArtifacts {
        group = 'artifacts'
        dependsOn 'sourcesJar'
        dependsOn 'javadocJar'
    }

    task outputDocWebsite(type: Copy) {
        from("${project.buildDir}/docs/")
        into("${rootProject.projectDir}/docs/${project.name}")
    }

    generateArtifacts.finalizedBy outputDocWebsite

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    task copyJars(type: Copy) {
        from jar.destinationDir
        into("${rootProject.buildDir}/jars/")
    }

    jar.finalizedBy copyJars


}

