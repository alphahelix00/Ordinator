buildscript {
    ext.kotlin_version = '1.2.71'
    ext.slf4j_version = '1.7.25'
    ext.logback_version = '1.2.3'
    ext.kotlin_logging_version = '1.6.10'
    ext.ktlint_version = '0.29.0'

    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jetbrains.dokka" version "0.9.17"
    id "com.github.johnrengelman.shadow" version "2.0.4"
    id "com.diffplug.gradle.spotless" version "3.15.0"
    id "com.github.ben-manes.versions" version "0.20.0"
}

allprojects {
    group = "com.github.kvnxiao"
    version = "2.0.0-SNAPSHOT"

    wrapper {
        distributionType = Wrapper.DistributionType.ALL
        gradleVersion = '4.10.2'
    }
}

subprojects {
    repositories {
        jcenter()
    }

    apply plugin: 'kotlin'
    apply plugin: 'jacoco'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'com.diffplug.gradle.spotless'
    apply plugin: 'com.github.ben-manes.versions'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
        testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        implementation "org.slf4j:slf4j-api:$slf4j_version"
        implementation "io.github.microutils:kotlin-logging:$kotlin_logging_version"
        testImplementation "org.slf4j:slf4j-api:$slf4j_version"
        testImplementation "ch.qos.logback:logback-classic:$logback_version"
        testImplementation "junit:junit:4.12"
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    spotless {
        kotlin {
            trimTrailingWhitespace()
            endWithNewline()
            ktlint("$ktlint_version")
            licenseHeaderFile "${rootProject.projectDir}/LICENSE_HEADER"
        }
    }

    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/javadoc"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    jacoco {
        toolVersion = "0.8.1"
        reportsDir = file("$buildDir/reports")
    }

    jacocoTestReport.dependsOn test
    jacocoTestReport {
        reports {
            xml.enabled = true
            xml.setDestination file("${buildDir}/reports/jacoco/report.xml")
            csv.enabled = true
            html.setDestination file("${buildDir}/reports/jacoco/html")
            csv.setDestination file("${buildDir}/reports/jacoco/jacocoTestReport.csv")
        }
    }
}
